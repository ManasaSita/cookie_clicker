{"ast":null,"code":"var _jsxFileName = \"/home/manasa/Projects/Assessment/cookie-clicker/frontend/src/components/ClickerGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClickerGame = () => {\n  _s();\n  const [totalScore, setTotalScore] = useState(0);\n  const [lastScoreIncrease, setLastScoreIncrease] = useState(0);\n  const [userId, setUserId] = useState(null);\n  const [lastPrize, setLastPrize] = useState(null);\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    if (storedUserId) {\n      setUserId(storedUserId);\n    } else {\n      const newUserId = `user_${Date.now()}`;\n      setUserId(newUserId);\n      localStorage.setItem('userId', newUserId);\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetchUserStats();\n    }\n  }, [userId]);\n  const fetchUserStats = async () => {\n    try {\n      const response = await fetch(`/api/stats/${userId}`);\n      const data = await response.json();\n      setTotalScore(data.totalScore || 0);\n    } catch (error) {\n      console.error('Failed to fetch stats', error);\n    }\n  };\n  const handleClick = async () => {\n    try {\n      const response = await fetch('/api/click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      const {\n        totalScore,\n        scoreIncrease,\n        prize\n      } = await response.json();\n      setTotalScore(totalScore);\n      setLastScoreIncrease(scoreIncrease);\n      if (prize) {\n        setLastPrize(prize);\n        alert(`Prize Won: ${prize}`);\n      }\n    } catch (error) {\n      console.error('Click failed', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '300px',\n      margin: '20px auto',\n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cookie Clicker Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Score: \", totalScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), lastPrize && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#ffeb3b',\n        color: 'black',\n        padding: '10px',\n        marginBottom: '10px',\n        borderRadius: '4px'\n      },\n      children: [\"Prize Won: \", lastPrize]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      style: {\n        backgroundColor: '#ff6b6b',\n        color: 'white',\n        border: 'none',\n        padding: '10px 20px',\n        borderRadius: '5px',\n        cursor: 'pointer',\n        transform: 'scale(1.05)',\n        transition: 'transform 0.1s'\n      },\n      children: [\"Click Me! (+\", lastScoreIncrease, \" Points)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ClickerGame, \"ebbMsorwCdj3WTND9Wn6ogaiPcI=\");\n_c = ClickerGame;\nexport default ClickerGame;\nvar _c;\n$RefreshReg$(_c, \"ClickerGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ClickerGame","_s","totalScore","setTotalScore","lastScoreIncrease","setLastScoreIncrease","userId","setUserId","lastPrize","setLastPrize","storedUserId","localStorage","getItem","newUserId","Date","now","setItem","fetchUserStats","response","fetch","data","json","error","console","handleClick","method","headers","body","JSON","stringify","scoreIncrease","prize","alert","style","width","margin","textAlign","padding","border","borderRadius","boxShadow","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","color","marginBottom","onClick","cursor","transform","transition","_c","$RefreshReg$"],"sources":["/home/manasa/Projects/Assessment/cookie-clicker/frontend/src/components/ClickerGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ClickerGame = () => {\n  const [totalScore, setTotalScore] = useState(0);\n  const [lastScoreIncrease, setLastScoreIncrease] = useState(0);\n  const [userId, setUserId] = useState(null);\n  const [lastPrize, setLastPrize] = useState(null);\n\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    if (storedUserId) {\n      setUserId(storedUserId);\n    } else {\n      const newUserId = `user_${Date.now()}`;\n      setUserId(newUserId);\n      localStorage.setItem('userId', newUserId);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (userId) {\n      fetchUserStats();\n    }\n  }, [userId]);\n\n  const fetchUserStats = async () => {\n    try {\n      const response = await fetch(`/api/stats/${userId}`);\n      const data = await response.json();\n      setTotalScore(data.totalScore || 0);\n    } catch (error) {\n      console.error('Failed to fetch stats', error);\n    }\n  };\n\n  const handleClick = async () => {\n    try {\n      const response = await fetch('/api/click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId })\n      });\n      const { totalScore, scoreIncrease, prize } = await response.json();\n\n      setTotalScore(totalScore);\n      setLastScoreIncrease(scoreIncrease);\n\n      if (prize) {\n        setLastPrize(prize);\n        alert(`Prize Won: ${prize}`);\n      }\n    } catch (error) {\n      console.error('Click failed', error);\n    }\n  };\n\n  return (\n    <div style={{ \n      width: '300px', \n      margin: '20px auto', \n      textAlign: 'center',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      boxShadow: '0 4px 6px rgba(0,0,0,0.1)'\n    }}>\n      <h2>Cookie Clicker Clone</h2>\n      <p>Total Score: {totalScore}</p>\n      \n      {lastPrize && (\n        <div style={{ \n          backgroundColor: '#ffeb3b', \n          color: 'black',\n          padding: '10px',\n          marginBottom: '10px',\n          borderRadius: '4px'\n        }}>\n          Prize Won: {lastPrize}\n        </div>\n      )}\n      \n      <button \n        onClick={handleClick}\n        style={{\n          backgroundColor: '#ff6b6b',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '5px',\n          cursor: 'pointer',\n          transform: 'scale(1.05)',\n          transition: 'transform 0.1s'\n        }}\n      >\n        Click Me! (+{lastScoreIncrease} Points)\n      </button>\n    </div>\n  );\n};\n\nexport default ClickerGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}